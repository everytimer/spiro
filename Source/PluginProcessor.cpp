//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "PluginProcessor.h"
#include "PluginEditor.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GribAudioProcessor::GribAudioProcessor(): 
AudioProcessor (BusesProperties()   .withOutput ("Output", juce::AudioChannelSet::stereo(), true)
                                    .withInput  ("Input",  juce::AudioChannelSet::stereo(), false))
{
}

GribAudioProcessor::~GribAudioProcessor()
{
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GribAudioProcessor::getNumPrograms()    { return 1; }
int GribAudioProcessor::getCurrentProgram() { return 0; }
void GribAudioProcessor::setCurrentProgram (int index) {}
const juce::String GribAudioProcessor::getProgramName (int index) { return {}; }
void GribAudioProcessor::changeProgramName (int index, const juce::String& newName) {}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GribAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{

        juce::String message;

        settings.sample_rate = sampleRate;
        settings.buffer_size = samplesPerBlock;

        feed    = new cell::feeder(&settings);
        wBuffer = new cell::wavering<cell::point3d<float>>(sampleRate);

        juce::Logger::getCurrentLogger()->writeToLog (message);
}

void GribAudioProcessor::releaseResources()
{
        delete wBuffer;
        delete feed;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GribAudioProcessor::translateMidi(const juce::MidiMessage& message)
{
    DBG("MIDI Message Recieved\n");
    cell::message msg;
    if (message.isNoteOn()) 
    {
        msg.channel = message.getChannel();
        msg.note    = message.getNoteNumber();
        msg.velocity= message.getVelocity();
    }
    feed->trigger(&msg);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Callback //////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GribAudioProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{

    buffer.clear();

    int numSamples  = buffer.getNumSamples();

	float* DataL    = buffer.getWritePointer(0);
	float* DataR    = buffer.getWritePointer(1);
    feed->process();
    cell::point3d<float> out;

    for (int i = 0; i < numSamples; i++)
	{
        out = feed->data->get(i, 0);
        wBuffer->set(out);
		DataL[i] = out.y * 0.1000f;
		DataR[i] = out.y * 0.1000f;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

juce::AudioProcessorEditor* GribAudioProcessor::createEditor()
{
    return new GribAudioProcessorEditor (*this);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GribAudioProcessor::getStateInformation (juce::MemoryBlock& destData)
{
}

void GribAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
}

juce::AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new GribAudioProcessor();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////